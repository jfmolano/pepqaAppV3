/* ========================================================================
 * Copyright 2014 PepqaAppV3
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 PepqaAppV3

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201411201032

*/

package co.edu.uniandes.csw.PepqaAppV3.evento.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.PepqaAppV3.evento.logic.dto.EventoPageDTO;
import co.edu.uniandes.csw.PepqaAppV3.evento.logic.dto.EventoDTO;
import co.edu.uniandes.csw.PepqaAppV3.evento.logic.api.IEventoLogicService;
import co.edu.uniandes.csw.PepqaAppV3.evento.persistence.EventoPersistence;
import co.edu.uniandes.csw.PepqaAppV3.evento.persistence.api.IEventoPersistence;
import co.edu.uniandes.csw.PepqaAppV3.evento.persistence.entity.EventoEntity;
import co.edu.uniandes.csw.PepqaAppV3.evento.persistence.converter.EventoConverter;
import static co.edu.uniandes.csw.PepqaAppV3.util._TestUtil.*;

@RunWith(Arquillian.class)
public class EventoLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(EventoLogicService.class.getPackage())
				.addPackage(IEventoLogicService.class.getPackage())
				.addPackage(EventoPersistence.class.getPackage())
				.addPackage(EventoEntity.class.getPackage())
				.addPackage(IEventoPersistence.class.getPackage())
                .addPackage(EventoDTO.class.getPackage())
                .addPackage(EventoConverter.class.getPackage())
                .addPackage(EventoEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IEventoLogicService eventoLogicService;
	
	@Inject
	private IEventoPersistence eventoPersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<EventoDTO> dtos=eventoPersistence.getEventos();
		for(EventoDTO dto:dtos){
			eventoPersistence.deleteEvento(dto.getId());
		}
	}

	private List<EventoDTO> data=new ArrayList<EventoDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			EventoDTO pdto=new EventoDTO();
			pdto.setDescripcion(generateRandom(String.class));
			pdto.setName(generateRandom(String.class));
			pdto=eventoPersistence.createEvento(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createEventoTest(){
		EventoDTO ldto=new EventoDTO();
		ldto.setDescripcion(generateRandom(String.class));
		ldto.setName(generateRandom(String.class));
		
		
		EventoDTO result=eventoLogicService.createEvento(ldto);
		
		Assert.assertNotNull(result);
		
		EventoDTO pdto=eventoPersistence.getEvento(result.getId());
		
		Assert.assertEquals(ldto.getDescripcion(), pdto.getDescripcion());	
		Assert.assertEquals(ldto.getName(), pdto.getName());	
	}
	
	@Test
	public void getEventosTest(){
		List<EventoDTO> list=eventoLogicService.getEventos();
		Assert.assertEquals(list.size(), data.size());
        for(EventoDTO ldto:list){
        	boolean found=false;
            for(EventoDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getEventoTest(){
		EventoDTO pdto=data.get(0);
		EventoDTO ldto=eventoLogicService.getEvento(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getDescripcion(), ldto.getDescripcion());
		Assert.assertEquals(pdto.getName(), ldto.getName());
        
	}
	
	@Test
	public void deleteEventoTest(){
		EventoDTO pdto=data.get(0);
		eventoLogicService.deleteEvento(pdto.getId());
        EventoDTO deleted=eventoPersistence.getEvento(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateEventoTest(){
		EventoDTO pdto=data.get(0);
		
		EventoDTO ldto=new EventoDTO();
		ldto.setId(pdto.getId());
		ldto.setDescripcion(generateRandom(String.class));
		ldto.setName(generateRandom(String.class));
		
		
		eventoLogicService.updateEvento(ldto);
		
		
		EventoDTO resp=eventoPersistence.getEvento(pdto.getId());
		
		Assert.assertEquals(ldto.getDescripcion(), resp.getDescripcion());	
		Assert.assertEquals(ldto.getName(), resp.getName());	
	}
	
	@Test
	public void getEventoPaginationTest(){
		
		EventoPageDTO dto1=eventoLogicService.getEventos(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		EventoPageDTO dto2=eventoLogicService.getEventos(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(EventoDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(EventoDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(EventoDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(EventoDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        EventoPageDTO dto3=eventoLogicService.getEventos(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(EventoDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(EventoDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}